# From the TextMate bundle

priority -50

#===================
# My snippets
#===================

global !p
import vim
import re
try:
	kLineWidth = int(vim.eval('&colorcolumn').split(',')[0]) - 1
except:
	kLineWidth = 79

kPythonIndent	= int(vim.eval('&softtabstop')) # 4
kIndent			= ' '*kPythonIndent
kCamel2Words	= re.compile('((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))')
kC2WFirstCap	= re.compile('(.)([A-Z][a-z]+)')
kC2WSecondCap	= re.compile('(.)([A-Z][a-z]+)')

def camel2words(string):
	return kCamel2Words.sub(r',\1', string ).lower().split(',')

def cond(snip, cond, val, default=''):
	snip.rv = val if cond else default

def under2words(string):
	return string.split('_')

def camel2sentence(string):
	return ' '.join(camel2words(string)).capitalize()

def under2sentence(string):
	return ' '.join(under2words(string)).capitalize()


endglobal

snippet sep "separator" b
`!p snip.rv = '#{0}//'.format( '-'*((kLineWidth-3)-len(snip.indent) ) )`$0
endsnippet

snippet _sep "fold closing separator" b
`!p snip.rv = '#}}}' + '{0}//'.format( '-'*((kLineWidth-6)-len(snip.indent) ) )`$0
endsnippet

snippet dsep "double separator" b
`!p snip.rv = '#{0}'.format( '='*((kLineWidth-1)-len(snip.indent) ) )`$0
endsnippet

snippet _dsep "fold closing double separator" b
`!p snip.rv = '#}}}' + '{0}'.format( '='*((kLineWidth-4)-len(snip.indent) ) )`$0
endsnippet

snippet ng-ctrl "AngularJS controller" b
`!p snip.rv = '#' + '{0}'.format( '='*(79-len(snip.indent) ) )`
mod.controller '${1:ControllerName}', [
	'\$scope', '\$log',$2`!p snip.rv=',' if t[2] else ''`
(\$scope, \$log`!p snip.rv=',' if t[2] else ''`${2/'//g}) ->
	angular.extend \$scope, {
		$0
	}
]


endsnippet

snippet ng-dir "AngularJS directive" b
`!p snip.rv = '#' + '{0}'.format( '='*(79-len(snip.indent) ) )`
mod.directive '${1:myDirective}', [
	'\$log', '\$parse',$2`!p snip.rv=',' if t[2] else ''`
(\$log, \$parse`!p snip.rv=',' if t[2] else ''`${2/'//g}) ->
	return {
		restrict:   '${3:A}'
		replace:    '${4:false}'
		scope:
			$5:      '=$1'
		templateUrl:  '/directives/$6'
		link: (\$scope, \$elem, \$attrs) ->
			$0
	}
]


endsnippet

snippet ng-service "AngularJS service" b
`!p snip.rv = '#' + '{0}'.format( '='*(79-len(snip.indent) ) )`
mod.factory '${1:MyService}', [
	'\$log', '\$q', '\$http',$2`!p snip.rv=',' if t[2] else ''`
(\$log, \$q, \$http`!p snip.rv=',' if t[2] else ''`${2/'//g} ) ->
		return new nwebjs.AuthService($q, $http)
]


endsnippet

snippet ng-flt "AngularJS filter" b
`!p snip.rv = '#' + '{0}'.format( '='*(79-len(snip.indent) ) )`
mod.filter '${1:myFilter}', [`!p snip.rv=' ' if t[2] else ''`$2
`!p snip.rv='(' if t[2] else ''`${2/'//g}`!p snip.rv=') ' if t[2] else ''`->
	return (${3:value}) ->
		$0
]
endsnippet

snippet mfun "Function (member)" b
${1:name}: `!p
snip.rv = '(' if len(t[2]) else ''
`${2:args}`!p
snip.rv = ') ' if len(t[2]) else ''
`->
	${0:# body...}
`!p snip.rv = '#}}}'+'{0}//'.format( '-'*(74-len(snip.indent) ) )`
endsnippet





snippet fun "Function" b
${1:name} = (${2:args}) ->
	${0:# body...}
endsnippet

snippet bfun "Function (bound)" b
${1:(${2:args}) }=>
	${0:# body...}
endsnippet

snippet if "If" b
if ${1:condition}
	${0:# body...}
endsnippet

snippet ife "If .. Else" b
if ${1:condition}
	${2:# body...}
else
	${3:# body...}
endsnippet

snippet elif "Else if" b
else if ${1:condition}
	${0:# body...}
endsnippet

snippet ifte "Ternary if" b
if ${1:condition} then ${2:value} else ${3:other}
endsnippet

snippet unl "Unless" b
${1:action} unless ${2:condition}
endsnippet

snippet fora "Array Comprehension" b
for ${1:name} in ${2:array}
	${0:# body...}
endsnippet

snippet foro "Object Comprehension" b
for ${1:key}, ${2:value} of ${3:Object}
	${0:# body...}
endsnippet

snippet forr "Range Comprehension (inclusive)" b
for ${1:name} in [${2:start}..${3:finish}]${4: by ${5:step}}
	${0:# body...}
endsnippet

snippet forrex "Range Comprehension (exclusive)" b
for ${1:name} in [${2:start}...${3:finish}]${4: by ${5:step}}
	${0:# body...}
endsnippet

snippet swi "Switch" b
switch ${1:object}
	when ${2:value}
		${0:# body...}
endsnippet

snippet cla "Class" b
`!p snip.rv = '#' + '{0}'.format( '='*(79-len(snip.indent) ) )`
class ${1:ClassName}${2: extends ${3:Ancestor}}
	`!p snip.rv = '#' + '{0}//'.format( '-'*(77-len(snip.indent) ) )`
	${4:constructor: (${5:args}) ->
		${6:# body...}}
	$7
endsnippet

snippet try "Try .. Catch" b
try
	$1
catch ${2:error}
	$3
endsnippet

snippet req "Require" b
${1/^'?(\w+)'?$/\L$1\E/} = require(${1:'${2:sys}'})
endsnippet

snippet # "Interpolated Code"
#{$1}$0
endsnippet

snippet log "Log" b
console.log ${1:"${2:msg}"}
endsnippet
